# ============================================================================
# PDF Compare - Simplified Multi-User Deployment (7-20 Users)
# ============================================================================
# Optimized for small to medium teams with efficient resource usage.
#
# Architecture:
# - Nginx Load Balancer (sticky sessions)
# - Multiple Streamlit instances (2-3 by default, scale as needed)
# - Single PostgreSQL database (can handle 100+ connections)
# - Ollama AI service
# - Redis cache
# - Optional monitoring (Prometheus + Grafana)
#
# What's removed from full scaled version:
# - Read replicas (not needed for <20 users)
# - PgBouncer (adds complexity, direct connection works fine)
#
# Handles: 7-20 concurrent users efficiently
#
# Usage:
#   Start all services:        docker-compose -f docker-compose-scaled.yml up -d
#   Scale Streamlit instances: docker-compose -f docker-compose-scaled.yml up -d --scale pdf-compare-ui=3
#   View logs:                 docker-compose -f docker-compose-scaled.yml logs -f
#   Stop all:                  docker-compose -f docker-compose-scaled.yml down
# ============================================================================

services:
  # ========================================================================
  # NGINX LOAD BALANCER
  # ========================================================================
  # Routes traffic to multiple Streamlit instances with sticky sessions
  nginx:
    image: nginx:alpine
    container_name: pdf-compare-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-logs:/var/log/nginx
    depends_on:
      - pdf-compare-ui
    restart: unless-stopped
    networks:
      - pdf-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========================================================================
  # POSTGRESQL DATABASE
  # ========================================================================
  postgres:
    image: postgis/postgis:16-3.4
    container_name: pdf-compare-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    command: |
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=16MB
      -c max_connections=200
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pdf-network
    shm_size: 256mb


  # ========================================================================
  # OLLAMA AI SERVICE
  # ========================================================================
  ollama:
    image: ollama/ollama:rocm
    container_name: pdf-compare-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=2
      - ROCM_VISIBLE_DEVICES=all
    devices:
      - /dev/kfd
      - /dev/dri
    group_add:
      - video
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp=unconfined
    shm_size: 1g
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pdf-network
    deploy:
      resources:
        limits:
          memory: 4g

  # ========================================================================
  # OLLAMA INITIALIZATION
  # ========================================================================
  ollama-init:
    image: ollama/ollama:rocm
    container_name: pdf-compare-ollama-init
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - pdf-network
    environment:
      - OLLAMA_HOST=http://ollama:11434
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for Ollama to be fully ready..."
        sleep 5
        echo "Pulling models..."
        ollama pull llama3.2 || true
        ollama pull nomic-embed-text || true
        echo "Models ready!"
        ollama list
    restart: "no"

  # ========================================================================
  # PDF COMPARE UI INSTANCES (Scale horizontally)
  # ========================================================================
  # Multiple instances behind load balancer
  # Scale with: docker-compose up -d --scale pdf-compare-ui=5
  pdf-compare-ui:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    image: pdf-compare-ui:latest
    # No container_name - allows scaling
    volumes:
      - ./data/uploads:/app/data/uploads
      - ./data/outputs:/app/data/outputs
    environment:
      # Direct connection to PostgreSQL (supports 100+ connections)
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}

      APP_DATA_DIR: /app/data
      OLLAMA_HOST: http://ollama:11434

      # Performance settings
      CPU_LIMIT: 8
      PDF_MIN_SEGMENT_LEN: 0.50
      PDF_MIN_FILL_AREA: 0.50
      PDF_BEZIER_SAMPLES: 24

      # Streamlit settings for multi-instance
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_HEADLESS: "true"
      STREAMLIT_SERVER_ENABLE_CORS: "false"
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: "true"

      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      ollama-init:
        condition: service_completed_successfully
    restart: unless-stopped
    command: streamlit run ui/streamlit_app.py --server.address 0.0.0.0 --server.port 8501 --server.enableXsrfProtection true
    networks:
      - pdf-network
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 12g  # Increased for high-DPI tiled OCR (1200 DPI)
        reservations:
          cpus: '3'
          memory: 4g
        # GPU support for EasyOCR (requires nvidia-docker)
        # Uncomment to enable GPU acceleration:
        # reservations:
        #   devices:
        #     - driver: nvidia
        #       count: 1
        #       capabilities: [gpu]
    shm_size: 512mb  # Shared memory for image processing
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================================================
  # REDIS (Session Storage) - Optional but recommended
  # ========================================================================
  redis:
    image: redis:7-alpine
    container_name: pdf-compare-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - pdf-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================================================
  # MONITORING - Prometheus (Optional)
  # ========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: pdf-compare-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - pdf-network

  # ========================================================================
  # MONITORING - Grafana (Optional)
  # ========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: pdf-compare-grafana
    ports:
      - ":3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - pdf-network

# ============================================================================
# PERSISTENT VOLUMES
# ============================================================================
volumes:
  postgres-data:
    driver: local
  ollama-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ============================================================================
# NETWORK
# ============================================================================
networks:
  pdf-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
