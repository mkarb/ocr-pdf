# ============================================================================
# PDF Compare - Multi-Container Deployment
# ============================================================================
# This docker-compose file separates services into independent containers:
#
# 1. POSTGRES   - Database (postgis/postgis pre-built image)
# 2. OLLAMA     - AI/LLM service (ollama/ollama pre-built image)
# 3. APP        - Your PDF Compare UI/code (built from Dockerfile)
#
# Each container can be started/stopped/updated INDEPENDENTLY without
# affecting the others. Data is persisted in named volumes.
#
# Usage:
#   Start everything:        docker-compose -f docker-compose-full.yml up -d
#   Start Postgres only:     docker-compose -f docker-compose-full.yml up -d postgres
#   Start Ollama only:       docker-compose -f docker-compose-full.yml up -d ollama
#   Start app only:          docker-compose -f docker-compose-full.yml up -d pdf-compare-ui
#   Rebuild app only:        docker-compose -f docker-compose-full.yml build pdf-compare-ui
#   Stop Postgres:           docker-compose -f docker-compose-full.yml stop postgres
#   Stop Ollama:             docker-compose -f docker-compose-full.yml stop ollama
#
# Or use the build.sh script for easier management!
# ============================================================================

services:
  # ========================================================================
  # CONTAINER 1: PostgreSQL Database
  # ========================================================================
  # Uses pre-built image - no build needed, just pull and run
  # Data persisted in 'postgres-data' volume
  # Can be updated by pulling new image: docker pull postgis/postgis:16-3.4
  postgres:
    image: postgis/postgis:16-3.4
    container_name: pdf-compare-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pdfuser -d pdfcompare"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pdf-network

  # ========================================================================
  # CONTAINER 2: Ollama AI Service
  # ========================================================================
  # Uses pre-built image - no build needed, just pull and run
  # Models persisted in 'ollama-data' volume (~4GB for llama3.2)
  # Can be updated by pulling new image: docker pull ollama/ollama:latest
  ollama:
    image: ollama/ollama:latest
    container_name: pdf-compare-ollama
    ports:
      - "127.0.0.1:11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pdf-network
    # Optional: GPU support (requires nvidia-docker)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # ========================================================================
  # Ollama Model Initialization (helper container)
  # ========================================================================
  # One-time container that downloads AI models
  # Runs once then exits (restart: "no")
  ollama-init:
    image: ollama/ollama:latest
    container_name: pdf-compare-ollama-init
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - pdf-network
    environment:
      - OLLAMA_HOST=http://ollama:11434
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for Ollama to be fully ready..."
        sleep 5

        echo "Pulling llama3.2 model (this may take a few minutes)..."
        ollama pull llama3.2 || true

        echo "Pulling nomic-embed-text model..."
        ollama pull nomic-embed-text || true

        echo "Models ready!"
        ollama list
    restart: "no"

  # ========================================================================
  # CONTAINER 3: PDF Compare Application
  # ========================================================================
  # Built from local Dockerfile - THIS IS WHAT YOU UPDATE FREQUENTLY
  # Multi-stage build means only the 'app' layer rebuilds when code changes
  # No dependencies layer rebuild = FAST updates (~30 seconds)
  #
  # To update this container:
  #   1. Edit your code (ui/ or pdf_compare/ directories)
  #   2. Run: ./build.sh app build
  #   3. Run: ./build.sh app restart
  #   4. Postgres and Ollama keep running!
  pdf-compare-ui:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    image: pdf-compare-ui:latest
    container_name: pdf-compare-ui
    ports:
      - "127.0.0.1:8501:8501"
    volumes:
      - ./data/uploads:/app/data/uploads
      - ./data/outputs:/app/data/outputs
    environment:
      # Database connection
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      APP_DATA_DIR: /app/data

      # Ollama connection
      OLLAMA_HOST: http://ollama:11434

      # Performance settings
      CPU_LIMIT: 15
      PDF_MIN_SEGMENT_LEN: 0.50
      PDF_MIN_FILL_AREA: 0.50
      PDF_BEZIER_SAMPLES: 24

      # Python settings
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      ollama-init:
        condition: service_completed_successfully
    restart: unless-stopped
    command: streamlit run ui/streamlit_app.py --server.address 0.0.0.0 --server.port 8501
    networks:
      - pdf-network
    cpus: 16
    mem_limit: 12g  # Increased for high-DPI tiled OCR
    shm_size: 512mb  # Shared memory for image processing
    # GPU support for EasyOCR (requires nvidia-docker)
    # Uncomment to enable GPU acceleration:
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============================================================================
# Persistent Volumes
# ============================================================================
# These volumes persist data even when containers are stopped/removed
volumes:
  postgres-data:
    driver: local
    # Contains all PostgreSQL data
    # Delete this volume to reset the database: docker volume rm postgres-data

  ollama-data:
    driver: local
    # Contains downloaded AI models (~4GB)
    # Delete this volume to re-download models: docker volume rm ollama-data

# ============================================================================
# Network
# ============================================================================
# All containers communicate via this bridge network
networks:
  pdf-network:
    driver: bridge
